{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FormField/FormField.js","components/NewMovie/Messages.js","helpers/validators.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","FormField","id","name","value","label","placeholder","error","onChange","onBlur","Form","Input","content","type","MessageWarning","Message","warning","header","required","url","test","fieldConfigs","validators","preparedState","reduce","obj","Object","freeze","NewMovie","state","values","errors","isFetching","handleChange","target","setState","handleSubmit","event","preventDefault","newErrors","forEach","validateField","isValid","props","onAdd","handleBlur","find","cnf","validator","filter","Boolean","join","array","some","this","success","onSubmit","Button","color","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86fb3f6d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport './FormField.scss';\n\nexport const FormField = ({\n  id,\n  name,\n  value,\n  label,\n  placeholder,\n  error,\n  onChange,\n  onBlur,\n}) => (\n  <Form.Input\n    error={error && { content: error }}\n    type=\"text\"\n    id={id}\n    name={name}\n    label={`Movie ${label}`}\n    placeholder={placeholder}\n    value={value}\n    onChange={onChange}\n    onBlur={onBlur}\n  />\n);\n\nFormField.defaultProps = {\n  placeholder: '',\n  error: '',\n};\n\nFormField.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  error: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\n\nexport const MessageWarning = () => (\n  <Message\n    warning\n    header=\"Error!\"\n    content=\"All form fields must be filled out.\"\n  />\n);\n\nexport const MessageSuccess = ({ isValid, isFetching }) => (\n  <Message\n    success={isValid && isFetching}\n    header=\"Success!\"\n    content=\"All form fields are filled in correctly.\"\n  />\n);\n\nMessageSuccess.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  isValid: PropTypes.bool.isRequired,\n};\n","export const required = (label, value) => {\n  if (value) {\n    return '';\n  }\n\n  return `${label} is required`;\n};\n\nexport const url = (label, value) => {\n  // eslint-disable-next-line max-len\n  const URL_REGEXP = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  return URL_REGEXP.test(value)\n    ? ''\n    : `${label} should be a valid URL`;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form } from 'semantic-ui-react';\nimport { FormField } from '../FormField';\nimport { MessageWarning } from './Messages';\nimport { required, url } from '../../helpers/validators';\nimport './NewMovie.scss';\n\nconst fieldConfigs = [\n  {\n    name: 'title',\n    label: 'Title',\n    placeholder: 'Enter a title',\n    validators: [required],\n  },\n  {\n    name: 'description',\n    label: 'Description',\n    placeholder: 'Enter a description',\n    validators: [required],\n  },\n  {\n    name: 'imgUrl',\n    label: 'Image URL',\n    placeholder: 'Paste an image url',\n    validators: [required, url],\n  },\n  {\n    name: 'imdbUrl',\n    label: 'IMDB URL',\n    placeholder: 'Paste an IMDB url',\n    validators: [required, url],\n  },\n  {\n    name: 'imdbId',\n    label: 'IMDB id',\n    placeholder: 'Enter an IMDB id',\n    validators: [required],\n  },\n];\n\nconst preparedState = fieldConfigs.reduce(\n  // eslint-disable-next-line no-return-assign,no-param-reassign,no-sequences\n  (obj, { name }) => (obj[name] = '', obj), {},\n);\n\nObject.freeze(preparedState);\n\nexport class NewMovie extends Component {\n  state = {\n    values: preparedState,\n    errors: preparedState,\n    isFetching: false,\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState(state => ({\n      values: {\n        ...state.values,\n        [name]: value,\n      },\n      errors: {\n        ...state.errors,\n        [name]: '',\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState((state) => {\n      const newErrors = { ...preparedState };\n\n      fieldConfigs.forEach(({ name, label }) => {\n        newErrors[name] = this.validateField(name, state.values[name], label);\n      });\n\n      if (!this.isValid(newErrors)) {\n        return { errors: newErrors };\n      }\n\n      this.props.onAdd(state.values);\n\n      return {\n        ...state,\n        values: preparedState,\n        errors: preparedState,\n      };\n    });\n  };\n\n  handleBlur = ({ target: { name, id } }) => {\n    this.setState(state => ({\n      errors: {\n        ...state.errors,\n        [name]: this.validateField(name, state.values[name], id),\n      },\n    }));\n  };\n\n  validateField = (name, value, label) => {\n    const { validators = [] } = fieldConfigs.find(cnf => cnf.name === name);\n\n    return validators\n      .map(validator => validator(label, value))\n      .filter(Boolean)\n      .join(', ');\n  };\n\n  isValid = array => !Object.values(array).some(Boolean);\n\n  render() {\n    const { values, errors, isFetching } = this.state;\n    const isValid = this.isValid(errors);\n\n    return (\n      <Form\n        className=\"add-movie\"\n        warning\n        success={isValid && isFetching}\n        onSubmit={this.handleSubmit}\n      >\n        {fieldConfigs.map(({ name, label, placeholder }) => (\n          <FormField\n            key={name}\n            id={label}\n            name={name}\n            label={label}\n            placeholder={placeholder}\n            value={values[name]}\n            error={errors[name]}\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n          />\n        ))}\n        <MessageWarning\n          isValid={isValid}\n          isFetching={isFetching}\n        />\n        <Button className=\"add-movie__btn\" color=\"yellow\">Add Movie</Button>\n      </Form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}